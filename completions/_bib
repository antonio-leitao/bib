#compdef bib

_bib() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    # First, handle the hidden completion flags
    _arguments -C \
        '--complete[Hidden completion mode]:query:' \
        '--complete-context[Hidden completion context]:context:' \
        '1: :->command' \
        '*:: :->args'

    case $state in
        command)
            local commands=(
                'add:Add new reference from URL or PDF'
                'search:Search papers using fuzzy matching'
                'list:List all papers in the database'
                'stats:Show database statistics'
            )
            _describe 'command' commands
            ;;
        args)
            case $line[1] in
                add)
                    _arguments \
                        '1:url:_files' \
                        '(-n --notes)'{-n,--notes}'[Optional notes]:notes:' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
                search)
                    # First handle the flags
                    _arguments -C \
                        '(-a --author)'{-a,--author}'[Search by author instead of title]' \
                        '(-n --limit)'{-n,--limit}'[Maximum results]:limit:' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '*:query:->search_query'
                    
                    if [[ "$state" == "search_query" ]]; then
                        # Determine context based on flags
                        local context="search-title"
                        local i
                        for (( i=2; i <= ${#words[@]}; i++ )); do
                            if [[ "${words[$i]}" == "-a" ]] || [[ "${words[$i]}" == "--author" ]]; then
                                context="search-author"
                                break
                            fi
                        done
                        
                        # Get current input
                        local current_input="${words[CURRENT]}"
                        
                        # Get completions from bib
                        local IFS=$'\n'
                        local -a completions
                        completions=($(bib --complete "$current_input" --complete-context "$context" 2>/dev/null))
                        
                        if [[ ${#completions[@]} -gt 0 ]]; then
                            # Parse completions and descriptions
                            local -a items
                            local comp
                            for comp in $completions; do
                                # Split on first colon to separate value from description
                                if [[ "$comp" == *:* ]]; then
                                    local value="${comp%%:*}"
                                    local desc="${comp#*:}"
                                    items+=("${value//:/\\:}:${desc//:/\\:}")
                                else
                                    items+=("${comp//:/\\:}")
                                fi
                            done
                            
                            _describe -t papers 'papers' items
                        fi
                        
                        # Don't fall back to file completion
                        return 0
                    fi
                    ;;
                list)
                    _arguments \
                        '(-l --limit)'{-l,--limit}'[Maximum papers to display]:limit:' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
                stats)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
            esac
            ;;
    esac
}

_bib "$@"
