#compdef bib

# This script provides modern, fuzzy-matching completions for the 'bib' command.
# It is self-contained and does not require the user to have global fuzzy-matching
# settings in their .zshrc.

# --- Style Definitions (unchanged) ---
zstyle ':completion:*:*:bib:*:*' menu select
zstyle ':completion:*:*:bib:*:*' group-name ''
zstyle ':completion:*:*:bib:*:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# --- Helper function for 'search' completions ---
# This function is called by _arguments to generate the list of possible papers.
# Putting the logic here avoids all the quoting issues.
_bib_get_search_results() {
    local context="search-title"
    local description="titles"

    # Check if the user has passed the --author flag
    if (( ${words[(I)-a]} || ${words[(I)--author]} )); then
        context="search-author"
        description="authors"
    fi

    # The most robust way to create an array from command output.
    # It splits ONLY on newlines, preserving spaces within titles.
    local -a completions
    completions=( ${(f)"$(bib --complete '' --complete-context "$context")"} )

    # Use _values to present the completions to the user.
    _values "$description" "$completions[@]"
}


# --- Main Completion Logic ---
_bib() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        '1: :->command' \
        '*:: :->args'

    case $state in
        command)
            local -a commands
            commands=(
                'add:Add new reference from URL or PDF'
                'search:Search papers using fuzzy matching'
                'list:List all papers in the database'
                'stats:Show database statistics'
            )
            _describe 'command' commands
            ;;
        args)
            case $line[1] in
                add)
                    _arguments \
                        '(-n --notes)'{-n,--notes}'[Optional notes]:notes:' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:URL or PDF Path:_files'
                    ;;

                search)
                    # The _arguments call is now much cleaner.
                    # For the positional argument (*), it simply calls our helper function.
                    _arguments \
                        '(-a --author)'{-a,--author}'[Search by author instead of title]' \
                        '(-n --limit)'{-n,--limit}'[Maximum results]:limit:' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '*:Search query:_bib_get_search_results'
                    ;;

                list)
                    _arguments \
                        '(-l --limit)'{-l,--limit}'[Maximum papers to display]:limit:' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;

                stats)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
            esac
            ;;
    esac
}

_bib "$@"
